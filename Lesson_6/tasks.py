import math
import numpy as np
from statsmodels.stats.weightstats import _tconfint_generic as t_stat

"""
Lesson 5 - TASK 1
Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16. 
Найти доверительный интервал для оценки математического ожидания с надежностью 0.95, если выборочная средняя M = 80, 
а объем выборки n = 256.
"""
M = 80
n = 256
s = math.sqrt(16) / math.sqrt(n)
T1 = M - 1.96 * s
T2 = M + 1.96 * s
print(f"{'.'*20} Lesson 5 - Task 1 {'.'*20}\n"
      f"Values are between {T1} and {T2}\n")


"""
TASK 1
Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
Полученные значения должны быть равны.
Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,
а затем с использованием функций из библиотек numpy и pandas.

"""

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
zp_average = zp.mean()
ks_average = ks.mean()
average = (zp * ks).mean()
covar = average - ks_average * zp_average

std_zp = zp.std()
std_ks = ks.std()
correlation = covar / (std_ks * std_zp)
print(f"{'.'*20} Task 1 {'.'*20}\n"
      f"Covariance: {covar} = {np.cov(zp, ks, ddof=0)}\n"
      f"Correlation: {correlation} = {np.corrcoef(zp, ks)}\n")

"""
TASK 2
Измерены значения IQ выборки студентов,
обучающихся в местных технических вузах:
131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
Известно, что в генеральной совокупности IQ распределен нормально.
Найдите доверительный интервал для математического ожидания с надежностью 0.95.
"""
iq = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
iq_average = iq.mean()
std_iq = iq.std(ddof=1)
average_std = std_iq / (np.sqrt(len(iq)))
print(f"{'.'*20} Task 2 {'.'*20}\n"
      f"Confidence interval: {t_stat(iq_average, average_std, len(iq) - 1, 0.05, 'two-sided')}\n")

"""
TASK 3
Известно, что рост футболистов в сборной распределен нормально
с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27,
среднее выборочное составляет 174.2. Найдите доверительный интервал для математического
ожидания с надежностью 0.95.
"""
average_height = 174.2
height_std = np.sqrt(25)
height_std_average = height_std / np.sqrt(27)
print(f"{'.'*20} Task 3 {'.'*20}\n"
      f"Confidence interval: {t_stat(average_height, height_std_average, len(iq) - 1, 0.05, 'two-sided')}\n")


"""
RESULTS:

.................... Lesson 5 - Task 1 ....................
Values are between 79.51 and 80.49

.................... Task 1 ....................
Covariance: 9157.839999999997 = [[ 3494.64  9157.84]
 [ 9157.84 30468.89]]
Correlation: 0.8874900920739158 = [[1.         0.88749009]
 [0.88749009 1.        ]]

.................... Task 2 ....................
Confidence interval: (110.55608365158724, 125.64391634841274)

.................... Task 3 ....................
Confidence interval: (172.02323825523706, 176.37676174476292)

"""
