import numpy as np
import math
from statsmodels.stats.weightstats import _tconfint_generic as t_stat

"""
LESSON 4 - TASK 2
О случайной непрерывной равномерно распределенной величине B известно, что ее дисперсия равна 0.2.
Можно ли найти правую границу величины B и ее среднее значение зная, что левая граница равна 0.5?
Если да, найдите ее.
"""

# b1 = 1.0491933384829668 - берем это значение, т.к b2 < 0
# b2 = -2.049193338482967
left_border = 0.5 + np.sqrt(12 * 0.2)
print(f"{'.'*20} Lesson 4 - Task 2 {'.'*20}\n"
      f"Average: {(0.5 + 1.05) / 2}\n"
      f"Left border = {left_border}\n")


"""
TASK 1
Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16. 
Найти доверительный интервал для оценки математического ожидания с надежностью 0.95, если выборочная средняя M = 80, 
а объем выборки n = 256.
"""
M = 80
n = 256
s = math.sqrt(16) / n
T1 = M - 1.96 * s
T2 = M + 1.96 * s
print(f"{'.'*20} Task 1 {'.'*20}\n"
      f"Values are between {T1} and {T2}\n")

"""
TASK 2
В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью, 
получены опытные данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1 
Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей, 
оценить истинное значение величины X при помощи доверительного интервала, покрывающего это значение 
с доверительной вероятностью 0,95.
"""
selection = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
s_average = selection.mean()
std_selection = selection.std(ddof=1)
mean_std = std_selection / (np.sqrt(len(selection)))
print(f"{'.'*20} Task 2 {'.'*20}\n"
      f"Values are between {t_stat(s_average, mean_std, len(selection) - 1, 0.05, 'two-sided')}\n")

"""
TASK 3
Утверждается, что шарики для подшипников, изготовленные автоматическим станком, имеют средний диаметр 17 мм. 
Используя односторонний критерий с α=0,05, проверить эту гипотезу, если в выборке из n=100 шариков средний диаметр 
оказался равным 17.5 мм, а дисперсия известна и равна 4 кв.мм.
"""
X = 17.5
M = 17
student = 1.645
D = 4
n = 100
res = (X - M) / math.sqrt(4 / 100)
print(f"{'.'*20} Task 3 {'.'*20}\n"
      f"Result {res} in more than {student}. μ(1) > μ(0)\n")


"""
TASK 4
Продавец утверждает, что средний вес пачки печенья составляет 200 г. Из партии извлечена выборка из 10 пачек. 
Вес каждой пачки составляет: 202, 203, 199, 197, 195, 201, 200, 204, 194, 190. 
Известно, что их веса распределены нормально.
Верно ли утверждение продавца, если учитывать, что доверительная вероятность равна 99%?
"""
weights = np.array([202, 203, 199, 197, 195, 201, 200, 204, 194, 190])
average = weights.mean()
std_x = weights.std(ddof=1)
res = (average - 200) / std_x * np.sqrt(len(weights))
student = 3.25
print(f"{'.'*20} Task 4 {'.'*20}\n"
      f"Res {res} is less than {student}. Statement is true")


"""
.................... Lesson 4 - Task 2 ....................
Average: 0.775
Left border = 2.049193338482967

.................... Task 1 ....................
Values are between 79.969375 and 80.030625

.................... Task 2 ....................
Values are between (6.267515851415713, 6.912484148584288)

.................... Task 3 ....................
Result 2.5 in more than 1.645. μ(1) > μ(0)

.................... Task 4 ....................
Res -1.0651074037450896 is less than 3.25. Statement is true

Process finished with exit code 0

"""
